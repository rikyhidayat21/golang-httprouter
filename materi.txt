go mod init github.com/rikyhidayat21/golang-httprouter
go get github.com/julienschmidt/httprouter
go get github.com/stretchr/testify

Bagian 1. Router
- Inti dari library HttpRouter adalah struct Router
- Router ini merupakan implementasi dari http.Handler, sehingga kita bisa dengan mudah menambahkan ke dalam http.Server
- Untuk membuat Router, kita bisa menggunakan function httprouter.New(), yang akan mengembalikan Router pointer

HTTP Method
- Router mirip dengan ServeMux, dimana kita bisa menambahkan route ke dalam Router
- Kelebihan dibandingkan dengan ServeMux adalah, pada Router, kita bisa menentukan HTTP Method yang ingin kita gunakan, misal GET, POST, PUT, dan lain lain
- Cara menambahkan route ke dalam Router adalah gunakan function yang sama dengan HTTP Methodnya, misal router.GET(), router.POST(), dan lain-lain

httprouter.Handle
- Saat kita menggunakan ServeMux, ketika menambah route, kita bisa menambahkan http.Handler
- Berbeda dengan Router, pada Router kita tidak menggunakan http.Handler lagi, melainkan menggunakan type httprouter.Handle
- Perbedaan dengan http.Handler adalah, pada httprouter.Handle, terdapat parameter ke tiga yaitu Params.
[Note Begin]
Handle is a function that can be registered to a route to handle HTTP requests.
Like http.HandlerFunc, but has a third parameter for the values of wildcards(variables)
type Handle func(http.ResponseWriter, *http.Request, Params)
[Note End]

Bagian 2. Params
- httprouter.Handle memiliki parameter yang ketiga yaitu Params. Untuk apa kegunaan params?
- Params merupakan tempat untuk menyimpan parameter yang dikirim dari client
- Namun params ini bukan query parameter, melainkan parameter di URL
- Kadang kita butuh membuat URL yang tidak fix, alias bisa berubah-ubah, misal /products/1, /products/2, dst
- ServeMux tidak mendukung hal tersebut, namun Router mendukung hal tersebut
- Paramter yang dinamis yang terdapat di URL, secara otomatis dikumpulkan di Params
- Namun, agar Router tahu, kita harus memberi tahu ketika menambahkan Route, dibagian mana kita akan buat URL Pathnya menjadi dinamis

Bagian. 3 Router Patterns
- Dengan menggunakan Router, kita dapat menambah params di URL
- Adakah pattern untuk membuat router? Jawabannya:

Named parameter
- Named parameter adalah pola pembuatan parameter dengan menggunakan nama
- Setiap nama parameter harus diawali dengan (titik dua), lalu diikuti dengan nama parameter
- Contoh, jika kita memiliki pattern seperti ini:
Pattern               /user/:user
/user/rikyhidayat21   match
/user/memet           match
/user/memet/inibos    no match
/user                 no match

Catch all parameter
- Selain named parameter, ada juga yang bernama catch all parameter, yaitu menangkap semua parameter
- Catch all paramter harus diawali dengan * (bintang), lalu diikuti dengan nama parameter
- Catch all parameter harus berada diposisi akhir URL
Pattern               /src/*filepath
/src/                 no match
/src/somefile         match
/src/subdir/filepath  match

Bagian 4. Serve File
- Pada materi golang web, kita sudah pernah membahas tentang serve file
- Pada router pun, mendukung serve static file menggunakan function ServeFiles(Path, FileSystem)
- Dimana pada Path, kita harus menggunakan Catch All parameter
- Sedangkan pada FileSystem kita bisa melakukan manual load dari folder atau menggunakan golang embed

Bagian 5. Panic Handler
- Apa yang terjadi jika terjadi panic pada logic Handler yang kita buat?
- Secara otomatis akan terjadi error, dan web akan berhenti mengembalikan response 
- Kadang saat terjadi panic, kita ingin melakukan sesuatu, misal memberitahu jika terjadi kesalahan di web, atau bahkan mengirim informasi log kesalahan yang terjadi 
- Seperti yang sudah dibahas dimateri golang web, jika kita ingin menangani panic, kita harus membuat middleware khusus secara manual
- Namun di Router, sudah disediakan untuk menangani panic, caranya dengan menggunakan attribute PanicHandler: func (http.ResponseWriter, *http.Request, interface{})

Bagian 6. Not Found Handler
- Selain panic Handler, Router juga memiliki not found Handler
- Not found handler adalah handler yang dieksekusi ketika client mencoba melakukan request URL yang memang tidak terdapat di Router
- Secara default, jika tidak ada route tidak ditemukan, Router akan melanjutkan request ke http.NotFound, namun kita bisa mengubahnya
- Caranya dengan mengubah router.NotFound = http.Handler

Bagian 7. Method not allowed
- Saat menggunakan ServeMux, kita tidak bisa menentukan HTTP Method apa yang digunakan untuk handler
- Namun pada Router, kita bisa menentukan HTTP Method yang ingin kita gunakan, lantas apa yang terjadi jika client tidak mengirim HTTP Method sesuai dengan yang kita tentukan?
- Maka akan terjadi Error MEthod not allowed
- Secar default, jika terjadi error seperti ini, maka Router akan memanggil function http.Error
- Jika kita ingin mengubahnya, kita bisa menggunakan router.MethodNotAllowed = http.Handler

Bagian 8. middleware
- HttpRouter hanyalah library untuk http router saja, tidak ada fitur lain selain http router
- Dan karena router merupakan implementasi dari http.Handler, jadi untuk middleware, kita bisa membuat sendiri, seperti yang sudah kita bahas di course golang web
